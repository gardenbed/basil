// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package zonePB

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ZoneManagerClient is the client API for ZoneManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZoneManagerClient interface {
	GetContainingZone(ctx context.Context, opts ...grpc.CallOption) (ZoneManager_GetContainingZoneClient, error)
	GetPlacesInZone(ctx context.Context, in *Zone, opts ...grpc.CallOption) (*GetPlacesResponse, error)
	GetUsersInZone(ctx context.Context, in *Zone, opts ...grpc.CallOption) (ZoneManager_GetUsersInZoneClient, error)
	GetUsersInZones(ctx context.Context, opts ...grpc.CallOption) (ZoneManager_GetUsersInZonesClient, error)
}

type zoneManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewZoneManagerClient(cc grpc.ClientConnInterface) ZoneManagerClient {
	return &zoneManagerClient{cc}
}

func (c *zoneManagerClient) GetContainingZone(ctx context.Context, opts ...grpc.CallOption) (ZoneManager_GetContainingZoneClient, error) {
	stream, err := c.cc.NewStream(ctx, &ZoneManager_ServiceDesc.Streams[0], "/zonePB.ZoneManager/GetContainingZone", opts...)
	if err != nil {
		return nil, err
	}
	x := &zoneManagerGetContainingZoneClient{stream}
	return x, nil
}

type ZoneManager_GetContainingZoneClient interface {
	Send(*Location) error
	CloseAndRecv() (*Zone, error)
	grpc.ClientStream
}

type zoneManagerGetContainingZoneClient struct {
	grpc.ClientStream
}

func (x *zoneManagerGetContainingZoneClient) Send(m *Location) error {
	return x.ClientStream.SendMsg(m)
}

func (x *zoneManagerGetContainingZoneClient) CloseAndRecv() (*Zone, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Zone)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zoneManagerClient) GetPlacesInZone(ctx context.Context, in *Zone, opts ...grpc.CallOption) (*GetPlacesResponse, error) {
	out := new(GetPlacesResponse)
	err := c.cc.Invoke(ctx, "/zonePB.ZoneManager/GetPlacesInZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zoneManagerClient) GetUsersInZone(ctx context.Context, in *Zone, opts ...grpc.CallOption) (ZoneManager_GetUsersInZoneClient, error) {
	stream, err := c.cc.NewStream(ctx, &ZoneManager_ServiceDesc.Streams[1], "/zonePB.ZoneManager/GetUsersInZone", opts...)
	if err != nil {
		return nil, err
	}
	x := &zoneManagerGetUsersInZoneClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ZoneManager_GetUsersInZoneClient interface {
	Recv() (*UserInZone, error)
	grpc.ClientStream
}

type zoneManagerGetUsersInZoneClient struct {
	grpc.ClientStream
}

func (x *zoneManagerGetUsersInZoneClient) Recv() (*UserInZone, error) {
	m := new(UserInZone)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zoneManagerClient) GetUsersInZones(ctx context.Context, opts ...grpc.CallOption) (ZoneManager_GetUsersInZonesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ZoneManager_ServiceDesc.Streams[2], "/zonePB.ZoneManager/GetUsersInZones", opts...)
	if err != nil {
		return nil, err
	}
	x := &zoneManagerGetUsersInZonesClient{stream}
	return x, nil
}

type ZoneManager_GetUsersInZonesClient interface {
	Send(*Zone) error
	Recv() (*UserInZone, error)
	grpc.ClientStream
}

type zoneManagerGetUsersInZonesClient struct {
	grpc.ClientStream
}

func (x *zoneManagerGetUsersInZonesClient) Send(m *Zone) error {
	return x.ClientStream.SendMsg(m)
}

func (x *zoneManagerGetUsersInZonesClient) Recv() (*UserInZone, error) {
	m := new(UserInZone)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ZoneManagerServer is the server API for ZoneManager service.
// All implementations must embed UnimplementedZoneManagerServer
// for forward compatibility
type ZoneManagerServer interface {
	GetContainingZone(ZoneManager_GetContainingZoneServer) error
	GetPlacesInZone(context.Context, *Zone) (*GetPlacesResponse, error)
	GetUsersInZone(*Zone, ZoneManager_GetUsersInZoneServer) error
	GetUsersInZones(ZoneManager_GetUsersInZonesServer) error
	mustEmbedUnimplementedZoneManagerServer()
}

// UnimplementedZoneManagerServer must be embedded to have forward compatible implementations.
type UnimplementedZoneManagerServer struct {
}

func (UnimplementedZoneManagerServer) GetContainingZone(ZoneManager_GetContainingZoneServer) error {
	return status.Errorf(codes.Unimplemented, "method GetContainingZone not implemented")
}
func (UnimplementedZoneManagerServer) GetPlacesInZone(context.Context, *Zone) (*GetPlacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlacesInZone not implemented")
}
func (UnimplementedZoneManagerServer) GetUsersInZone(*Zone, ZoneManager_GetUsersInZoneServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUsersInZone not implemented")
}
func (UnimplementedZoneManagerServer) GetUsersInZones(ZoneManager_GetUsersInZonesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUsersInZones not implemented")
}
func (UnimplementedZoneManagerServer) mustEmbedUnimplementedZoneManagerServer() {}

// UnsafeZoneManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZoneManagerServer will
// result in compilation errors.
type UnsafeZoneManagerServer interface {
	mustEmbedUnimplementedZoneManagerServer()
}

func RegisterZoneManagerServer(s grpc.ServiceRegistrar, srv ZoneManagerServer) {
	s.RegisterService(&ZoneManager_ServiceDesc, srv)
}

func _ZoneManager_GetContainingZone_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ZoneManagerServer).GetContainingZone(&zoneManagerGetContainingZoneServer{stream})
}

type ZoneManager_GetContainingZoneServer interface {
	SendAndClose(*Zone) error
	Recv() (*Location, error)
	grpc.ServerStream
}

type zoneManagerGetContainingZoneServer struct {
	grpc.ServerStream
}

func (x *zoneManagerGetContainingZoneServer) SendAndClose(m *Zone) error {
	return x.ServerStream.SendMsg(m)
}

func (x *zoneManagerGetContainingZoneServer) Recv() (*Location, error) {
	m := new(Location)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ZoneManager_GetPlacesInZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Zone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZoneManagerServer).GetPlacesInZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zonePB.ZoneManager/GetPlacesInZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZoneManagerServer).GetPlacesInZone(ctx, req.(*Zone))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZoneManager_GetUsersInZone_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Zone)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZoneManagerServer).GetUsersInZone(m, &zoneManagerGetUsersInZoneServer{stream})
}

type ZoneManager_GetUsersInZoneServer interface {
	Send(*UserInZone) error
	grpc.ServerStream
}

type zoneManagerGetUsersInZoneServer struct {
	grpc.ServerStream
}

func (x *zoneManagerGetUsersInZoneServer) Send(m *UserInZone) error {
	return x.ServerStream.SendMsg(m)
}

func _ZoneManager_GetUsersInZones_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ZoneManagerServer).GetUsersInZones(&zoneManagerGetUsersInZonesServer{stream})
}

type ZoneManager_GetUsersInZonesServer interface {
	Send(*UserInZone) error
	Recv() (*Zone, error)
	grpc.ServerStream
}

type zoneManagerGetUsersInZonesServer struct {
	grpc.ServerStream
}

func (x *zoneManagerGetUsersInZonesServer) Send(m *UserInZone) error {
	return x.ServerStream.SendMsg(m)
}

func (x *zoneManagerGetUsersInZonesServer) Recv() (*Zone, error) {
	m := new(Zone)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ZoneManager_ServiceDesc is the grpc.ServiceDesc for ZoneManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ZoneManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zonePB.ZoneManager",
	HandlerType: (*ZoneManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlacesInZone",
			Handler:    _ZoneManager_GetPlacesInZone_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetContainingZone",
			Handler:       _ZoneManager_GetContainingZone_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetUsersInZone",
			Handler:       _ZoneManager_GetUsersInZone_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetUsersInZones",
			Handler:       _ZoneManager_GetUsersInZones_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "zone.proto",
}
